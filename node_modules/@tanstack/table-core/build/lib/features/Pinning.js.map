{"version":3,"file":"Pinning.js","sources":["../../../src/features/Pinning.ts"],"sourcesContent":["import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { getMemoOptions, makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\nexport type RowPinningPosition = false | 'top' | 'bottom'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface RowPinningState {\n  bottom?: string[]\n  top?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface RowPinningTableState {\n  rowPinning: RowPinningState\n}\n\nexport interface ColumnPinningOptions {\n  /**\n   * Enables/disables column pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#enablecolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  enableColumnPinning?: boolean\n  /**\n   * Enables/disables all pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#enablepinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  enablePinning?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.columnPinning` changes. This overrides the default internal state management, so you will also need to supply `state.columnPinning` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#oncolumnpinningchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/oncolumnpinningchange)\n   */\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n}\n\nexport interface RowPinningOptions<TData extends RowData> {\n  /**\n   * Enables/disables row pinning for the table. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#enablerowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  enableRowPinning?: boolean | ((row: Row<TData>) => boolean)\n  /**\n   * When `false`, pinned rows will not be visible if they are filtered or paginated out of the table. When `true`, pinned rows will always be visible regardless of filtering or pagination. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#keeppinnedrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  keepPinnedRows?: boolean\n  /**\n   * If provided, this function will be called with an `updaterFn` when `state.rowPinning` changes. This overrides the default internal state management, so you will also need to supply `state.rowPinning` from your own managed state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#onrowpinningchange)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/onrowpinningchange)\n   */\n  onRowPinningChange?: OnChangeFn<RowPinningState>\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface RowPinningDefaultOptions {\n  onRowPinningChange: OnChangeFn<RowPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  /**\n   * Enables/disables column pinning for this column. Defaults to `true`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#enablepinning-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  /**\n   * Returns whether or not the column can be pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getcanpin)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getCanPin: () => boolean\n  /**\n   * Returns the pinned position of the column. (`'left'`, `'right'` or `false`)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getispinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getIsPinned: () => ColumnPinningPosition\n  /**\n   * Returns the numeric pinned index of the column within a pinned column group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getpinnedindex)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getPinnedIndex: () => number\n  /**\n   * Pins a column to the `'left'` or `'right'`, or unpins the column to the center if `false` is passed.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#pin)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  /**\n   * Returns all center pinned (unpinned) leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getcentervisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns all left pinned leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getleftvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  /**\n   * Returns all right pinned leaf cells in the row.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getrightvisiblecells)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface RowPinningRow {\n  /**\n   * Returns whether or not the row can be pinned.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getcanpin-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getCanPin: () => boolean\n  /**\n   * Returns the pinned position of the row. (`'top'`, `'bottom'` or `false`)\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getispinned-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getIsPinned: () => RowPinningPosition\n  /**\n   * Returns the numeric pinned index of the row within a pinned row group.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getpinnedindex-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getPinnedIndex: () => number\n  /**\n   * Pins a row to the `'top'` or `'bottom'`, or unpins the row to the center if `false` is passed.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#pin-1)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  pin: (\n    position: RowPinningPosition,\n    includeLeafRows?: boolean,\n    includeParentRows?: boolean\n  ) => void\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  /**\n   * Returns all center pinned (unpinned) leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getcenterleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns whether or not any columns are pinned. Optionally specify to only check for pinned columns in either the `left` or `right` position.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getissomecolumnspinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  /**\n   * Returns all left pinned leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getleftleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Returns all right pinned leaf columns.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getrightleafcolumns)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  /**\n   * Resets the **columnPinning** state to `initialState.columnPinning`, or `true` can be passed to force a default blank state reset to `{ left: [], right: [], }`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#resetcolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  resetColumnPinning: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.columnPinning` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#setcolumnpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n}\n\nexport interface RowPinningInstance<TData extends RowData> {\n  _getPinnedRows: (position: 'top' | 'bottom') => Row<TData>[]\n  /**\n   * Returns all bottom pinned rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getbottomrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getBottomRows: () => Row<TData>[]\n  /**\n   * Returns all rows that are not pinned to the top or bottom.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getcenterrows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getCenterRows: () => Row<TData>[]\n  /**\n   * Returns whether or not any rows are pinned. Optionally specify to only check for pinned rows in either the `top` or `bottom` position.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#getissomerowspinned)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getIsSomeRowsPinned: (position?: RowPinningPosition) => boolean\n  /**\n   * Returns all top pinned rows.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#gettoprows)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  getTopRows: () => Row<TData>[]\n  /**\n   * Resets the **rowPinning** state to `initialState.rowPinning`, or `true` can be passed to force a default blank state reset to `{ top: [], bottom: [], }`.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#resetrowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  resetRowPinning: (defaultState?: boolean) => void\n  /**\n   * Sets or updates the `state.rowPinning` state.\n   * @link [API Docs](https://tanstack.com/table/v8/docs/api/features/pinning#setrowpinning)\n   * @link [Guide](https://tanstack.com/table/v8/docs/guide/pinning)\n   */\n  setRowPinning: (updater: Updater<RowPinningState>) => void\n}\n\n//\n\nconst getDefaultColumnPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nconst getDefaultRowPinningState = (): RowPinningState => ({\n  top: [],\n  bottom: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState & RowPinningState => {\n    return {\n      columnPinning: getDefaultColumnPinningState(),\n      rowPinning: getDefaultRowPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions & RowPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n      onRowPinningChange: makeStateUpdater('rowPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): void => {\n    column.pin = position => {\n      const columnIds = column\n        .getLeafColumns()\n        .map(d => d.id)\n        .filter(Boolean) as string[]\n\n      table.setColumnPinning(old => {\n        if (position === 'right') {\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: [\n              ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n          }\n        }\n\n        if (position === 'left') {\n          return {\n            left: [\n              ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              ...columnIds,\n            ],\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        }\n\n        return {\n          left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n          right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n        }\n      })\n    }\n\n    column.getCanPin = () => {\n      const leafColumns = column.getLeafColumns()\n\n      return leafColumns.some(\n        d =>\n          (d.columnDef.enablePinning ?? true) &&\n          (table.options.enableColumnPinning ??\n            table.options.enablePinning ??\n            true)\n      )\n    }\n\n    column.getIsPinned = () => {\n      const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n      const { left, right } = table.getState().columnPinning\n\n      const isLeft = leafColumnIds.some(d => left?.includes(d))\n      const isRight = leafColumnIds.some(d => right?.includes(d))\n\n      return isLeft ? 'left' : isRight ? 'right' : false\n    }\n\n    column.getPinnedIndex = () => {\n      const position = column.getIsPinned()\n\n      return position\n        ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n        : 0\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): void => {\n    row.pin = (position, includeLeafRows, includeParentRows) => {\n      const leafRowIds = includeLeafRows\n        ? row.getLeafRows().map(({ id }) => id)\n        : []\n      const parentRowIds = includeParentRows\n        ? row.getParentRows().map(({ id }) => id)\n        : []\n      const rowIds = new Set([...parentRowIds, row.id, ...leafRowIds])\n\n      table.setRowPinning(old => {\n        if (position === 'bottom') {\n          return {\n            top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n            bottom: [\n              ...(old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n          }\n        }\n\n        if (position === 'top') {\n          return {\n            top: [\n              ...(old?.top ?? []).filter(d => !rowIds?.has(d)),\n              ...Array.from(rowIds),\n            ],\n            bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n          }\n        }\n\n        return {\n          top: (old?.top ?? []).filter(d => !rowIds?.has(d)),\n          bottom: (old?.bottom ?? []).filter(d => !rowIds?.has(d)),\n        }\n      })\n    }\n    row.getCanPin = () => {\n      const { enableRowPinning, enablePinning } = table.options\n      if (typeof enableRowPinning === 'function') {\n        return enableRowPinning(row)\n      }\n      return enableRowPinning ?? enablePinning ?? true\n    }\n    row.getIsPinned = () => {\n      const rowIds = [row.id]\n\n      const { top, bottom } = table.getState().rowPinning\n\n      const isTop = rowIds.some(d => top?.includes(d))\n      const isBottom = rowIds.some(d => bottom?.includes(d))\n\n      return isTop ? 'top' : isBottom ? 'bottom' : false\n    }\n    row.getPinnedIndex = () => {\n      const position = row.getIsPinned()\n      if (!position) return -1\n\n      const visiblePinnedRowIds = table\n        ._getPinnedRows(position)\n        ?.map(({ id }) => id)\n\n      return visiblePinnedRowIds?.indexOf(row.id) ?? -1\n    }\n    row.getCenterVisibleCells = memo(\n      () => [\n        row._getAllVisibleCells(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allCells, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allCells.filter(d => !leftAndRight.includes(d.column.id))\n      },\n      getMemoOptions(table.options, 'debugRows', 'getCenterVisibleCells')\n    )\n    row.getLeftVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.left],\n      (allCells, left) => {\n        const cells = (left ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'left' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      getMemoOptions(table.options, 'debugRows', 'getLeftVisibleCells')\n    )\n    row.getRightVisibleCells = memo(\n      () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n      (allCells, right) => {\n        const cells = (right ?? [])\n          .map(columnId => allCells.find(cell => cell.column.id === columnId)!)\n          .filter(Boolean)\n          .map(d => ({ ...d, position: 'right' }) as Cell<TData, unknown>)\n\n        return cells\n      },\n      getMemoOptions(table.options, 'debugRows', 'getRightVisibleCells')\n    )\n  },\n\n  createTable: <TData extends RowData>(table: Table<TData>): void => {\n    table.setColumnPinning = updater =>\n      table.options.onColumnPinningChange?.(updater)\n\n    table.resetColumnPinning = defaultState =>\n      table.setColumnPinning(\n        defaultState\n          ? getDefaultColumnPinningState()\n          : table.initialState?.columnPinning ?? getDefaultColumnPinningState()\n      )\n\n    table.getIsSomeColumnsPinned = position => {\n      const pinningState = table.getState().columnPinning\n\n      if (!position) {\n        return Boolean(pinningState.left?.length || pinningState.right?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table.getLeftLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n      (allColumns, left) => {\n        return (left ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getLeftLeafColumns')\n    )\n\n    table.getRightLeafColumns = memo(\n      () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n      (allColumns, right) => {\n        return (right ?? [])\n          .map(columnId => allColumns.find(column => column.id === columnId)!)\n          .filter(Boolean)\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getRightLeafColumns')\n    )\n\n    table.getCenterLeafColumns = memo(\n      () => [\n        table.getAllLeafColumns(),\n        table.getState().columnPinning.left,\n        table.getState().columnPinning.right,\n      ],\n      (allColumns, left, right) => {\n        const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n        return allColumns.filter(d => !leftAndRight.includes(d.id))\n      },\n      getMemoOptions(table.options, 'debugColumns', 'getCenterLeafColumns')\n    )\n\n    table.setRowPinning = updater => table.options.onRowPinningChange?.(updater)\n\n    table.resetRowPinning = defaultState =>\n      table.setRowPinning(\n        defaultState\n          ? getDefaultRowPinningState()\n          : table.initialState?.rowPinning ?? getDefaultRowPinningState()\n      )\n\n    table.getIsSomeRowsPinned = position => {\n      const pinningState = table.getState().rowPinning\n\n      if (!position) {\n        return Boolean(pinningState.top?.length || pinningState.bottom?.length)\n      }\n      return Boolean(pinningState[position]?.length)\n    }\n\n    table._getPinnedRows = memo(\n      position => [\n        table.getRowModel().rows,\n        table.getState().rowPinning[position!],\n        position,\n      ],\n      (visibleRows, pinnedRowIds, position) => {\n        const rows =\n          table.options.keepPinnedRows ?? true\n            ? //get all rows that are pinned even if they would not be otherwise visible\n              //account for expanded parent rows, but not pagination or filtering\n              (pinnedRowIds ?? []).map(rowId => {\n                const row = table.getRow(rowId, true)\n                return row.getIsAllParentsExpanded() ? row : null\n              })\n            : //else get only visible rows that are pinned\n              (pinnedRowIds ?? []).map(\n                rowId => visibleRows.find(row => row.id === rowId)!\n              )\n\n        return rows\n          .filter(Boolean)\n          .map(d => ({ ...d, position })) as Row<TData>[]\n      },\n      getMemoOptions(table.options, 'debugRows', '_getPinnedRows')\n    )\n\n    table.getTopRows = () => table._getPinnedRows('top')\n\n    table.getBottomRows = () => table._getPinnedRows('bottom')\n\n    table.getCenterRows = memo(\n      () => [\n        table.getRowModel().rows,\n        table.getState().rowPinning.top,\n        table.getState().rowPinning.bottom,\n      ],\n      (allRows, top, bottom) => {\n        const topAndBottom = new Set([...(top ?? []), ...(bottom ?? [])])\n        return allRows.filter(d => !topAndBottom.has(d.id))\n      },\n      getMemoOptions(table.options, 'debugRows', 'getCenterRows')\n    )\n  },\n}\n"],"names":["getDefaultColumnPinningState","left","right","getDefaultRowPinningState","top","bottom","Pinning","getInitialState","state","columnPinning","rowPinning","getDefaultOptions","table","onColumnPinningChange","makeStateUpdater","onRowPinningChange","createColumn","column","pin","position","columnIds","getLeafColumns","map","d","id","filter","Boolean","setColumnPinning","old","_old$left3","_old$right3","_old$left","_old$right","includes","_old$left2","_old$right2","getCanPin","leafColumns","some","_d$columnDef$enablePi","_ref","_table$options$enable","columnDef","enablePinning","options","enableColumnPinning","getIsPinned","leafColumnIds","getState","isLeft","isRight","getPinnedIndex","_table$getState$colum","_table$getState$colum2","indexOf","createRow","row","includeLeafRows","includeParentRows","leafRowIds","getLeafRows","_ref2","parentRowIds","getParentRows","_ref3","rowIds","Set","setRowPinning","_old$top3","_old$bottom3","_old$top","_old$bottom","has","Array","from","_old$top2","_old$bottom2","_ref4","enableRowPinning","isTop","isBottom","_table$_getPinnedRows","_visiblePinnedRowIds$","visiblePinnedRowIds","_getPinnedRows","_ref5","getCenterVisibleCells","memo","_getAllVisibleCells","allCells","leftAndRight","getMemoOptions","getLeftVisibleCells","cells","columnId","find","cell","getRightVisibleCells","createTable","updater","resetColumnPinning","defaultState","_table$initialState$c","_table$initialState","initialState","getIsSomeColumnsPinned","_pinningState$positio","pinningState","_pinningState$left","_pinningState$right","length","getLeftLeafColumns","getAllLeafColumns","allColumns","getRightLeafColumns","getCenterLeafColumns","resetRowPinning","_table$initialState$r","_table$initialState2","getIsSomeRowsPinned","_pinningState$positio2","_pinningState$top","_pinningState$bottom","getRowModel","rows","visibleRows","pinnedRowIds","_table$options$keepPi","keepPinnedRows","rowId","getRow","getIsAllParentsExpanded","getTopRows","getBottomRows","getCenterRows","allRows","topAndBottom"],"mappings":"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"}